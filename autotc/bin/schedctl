#!/bin/python

import os
schedpath = os.getenv('SCHEDAEMONPATH',"/home/adurden/Programs/chemtools/autotc/bin/")
import sys
sys.path.append(schedpath)
from schedctl_lib import *


from optparse import OptionParser
usage = "usage: %prog [options] file1 file2 ..."
parser=OptionParser(usage=usage)

(options, args) = parser.parse_args()


if len(args)<1:
  print("Usage: schedctl arg1 arg2 ...")
  print("schedctl start                      : Starts the daemon")
  print("schedctl stop                       : Stops the daemon")
  print("schedctl restart                    : Stops the daemon, and then starts it")
  print("schedctl q                          : Updates the queuefile with the current queue and prints it. Alias: queue")
  print("schedctl logq                       : Writes the current queue to the log (autotc/log/log by default)")
  print("schedctl add [alt_template]         : Adds terachem job in current directory to queue, using either the default or specified job template.")
  print("schedctl swap jid1 jid2             : Swaps the position of jobs in the queue, specified by jobid")
  print("schedctl reserve nodenumber [force] : Send reservation request for a node. Reserved nodes will not be used for jobs in the queue. The 'force' argument will kill any job currently running on the node, and send it to the back of the queue. Alias: res")
  print("schedctl unreserve nodenumber       : Clear reserved status on a node so that queued jobs may run on it again. Alias: unres")
  sys.exit(0)

if args[0] == "start":
  schedpid = get_sched_pid()
  if schedpid:
    print("Schedaemon already running with pid: "+str(schedpid)+"\n")
    sys.exit(0)
  else:
    pid = start_sched()
    if pid:
      print("Started with pid: "+str(pid)+"\n")
      sys.exit(0)
    else:
      print("Tried to start but something went wrong :(\n")
      sys.exit(0)

if args[0] == "stop":
  print(stop_sched())
  sys.exit(0)

if args[0] == "restart":
  print(restart_sched())
 

if args[0] == "add":
  schedpid = get_sched_pid()
  if not schedpid:
    print("Couldn't find scheduler process. Is it running?\n")
    sys.exit(0)
  if len(args)>1:
    for arg in args[1:]:
      if addjob(schedpid, arg):
        print("Added "+arg+" successfully.\n")
      else: print("Problem with "+arg+"\n")
  else:
    if addjob(schedpid, ""):
      print("Added current directory job successfully.\n")
    else: print("Problem with current directory job\n")

  sys.exit(0)

if ((args[0] == "q") or (args[0] == "queue")):
  schedpid = get_sched_pid()
  if not schedpid:
    print("Couldn't find scheduler process. Is it running?\n")
    sys.exit(0)
  print("Requesting Queue...\n")
  f = open('/proc/'+schedpid+'/fd/0','a')
  f.write("!command printq "+str(os.getppid())+"\n")
  f.flush;os.fsync(f.fileno());f.close(); del f
  time.sleep(1)
  start = time.time()
  endmsg = False
  f = open(schedpath+"/../log/queue",'r') 
  while(time.time()-start < 30):
    if endmsg: break
    line=f.readline()
    while line:
      if line == "::ENDMESSAGE::":
        print("")
        sys.exit(0)
      if line == "": pass
      else: print line,
      line=f.readline()
  sys.exit(0)
  

if args[0] == "logq":
  schedpid = get_sched_pid()
  if not schedpid:
    print("Couldn't find scheduler process. Is it running?\n")
    sys.exit(0)
  f = open('/proc/'+schedpid+'/fd/0','a')
  f.write("!command logprintq\n")
  f.flush;os.fsync(f.fileno());f.close()
  print("Queue will be written to log file.\n")
  sys.exit(0)

if args[0] == "del":
  if len(args)<2:
    print("No jobid specified. Get jobids via 'schedctl q'.\n")
    sys.exit(0)
  schedpid = get_sched_pid()
  if not schedpid:
    print("Couldn't find scheduler process. Is it running?\n")
    sys.exit(0)
  f = open('/proc/'+schedpid+'/fd/0','a')
  for jobid in args[1:]: 
    f.write("!command del "+str(jobid)+"\n")
  f.flush;os.fsync(f.fileno());f.close()
  print("Delete request sent\n")
  sys.exit(0)

if args[0] == "swap":
  if len(args)<3:
    print("Expected two jobid arguments, less than 3 total arguments.")
    sys.exit(0)
  schedpid = get_sched_pid()
  if not schedpid:  
    print("Couldn't find scheduler process. Is it running?\n")
    sys.exit(0)
  f = open('/proc/'+schedpid+'/fd/0','a')
  for jobid in args[1:]: 
    f.write("!command swap "+str(args[1])+" "+str(args[2])+"\n")
  f.flush;os.fsync(f.fileno());f.close()
  print("Swap request sent\n")
  sys.exit(0)

if (args[0] == "reserve") or (args[0] == "res"):
  if len(args)<2:
    print("No node number specified.\n")
    sys.exit(0)
  schedpid = get_sched_pid()
  if not schedpid:
    print("Couldn't find scheduler process. Is it running?\n")
    sys.exit(0)
  f = open('/proc/'+schedpid+'/fd/0','a')
  if len(args)>2:
    if args[2] == "force":
      f.write("!command reserve "+str(args[1])+" force\n")
    else: f.write("!command reserve "+str(args[1])+"\n")
  else:
    f.write("!command reserve "+str(args[1])+"\n")
  f.flush;os.fsync(f.fileno());f.close()
  print("Reservation request sent\n")
  sys.exit(0)

if (args[0] == "unreserve") or (args[0] == "unres"):
  if len(args)<2:
    print("No node number specified.\n")
    sys.exit(0)
  schedpid = get_sched_pid()
  if not schedpid:
    print("Couldn't find scheduler process. Is it running?\n")
    sys.exit(0)
  f = open('/proc/'+schedpid+'/fd/0','a')
  f.write("!command unreserve "+str(args[1])+"\n")
  f.flush;os.fsync(f.fileno());f.close()
  print("Unreservation request sent\n")
  sys.exit(0)





